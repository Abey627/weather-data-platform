name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-build-test:
    runs-on: ubuntu-latest
    env:
      DATABASE_NAME: weather_db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: change_this_password
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DJANGO_SECRET_KEY: test-secret-key
      DJANGO_DEBUG: False
      ALLOWED_HOSTS: localhost,127.0.0.1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
      - name: Generate .env.prod from secrets
        run: |
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env.prod
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env.prod
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env.prod
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env.prod
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env.prod
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env.prod
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env.prod
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env.prod
          echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> .env.prod
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env.prod
          echo "MAX_DAYS_ALLOWED=${{ secrets.MAX_DAYS_ALLOWED }}" >> .env.prod
      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.prod.yml up --build -d
      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if docker-compose -f docker-compose.prod.yml exec backend curl -s http://localhost:8000/ > /dev/null; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend... ($i)"
            sleep 2
          done
          if ! docker-compose -f docker-compose.prod.yml exec backend curl -s http://localhost:8000/ > /dev/null; then
            echo "Backend did not start in time."; exit 1
          fi
      - name: Run tests in backend container
        run: |
          docker-compose -f docker-compose.prod.yml exec backend pytest
      - name: Tear down Docker Compose
        if: always()
        run: |
          docker-compose -f docker-compose.prod.yml down
      - name: Deploy to Render (if build passes)
        if: github.ref == 'refs/heads/main' && success()
        run: |
          curl -X POST "$RENDER_DEPLOY_HOOK_URL"
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
